source,label,, 
package latexstudio.editor;,declaration,,
import javax.swing.SwingUtilities;,declaration,,
import latexstudio.editor.remote.Cloud;,declaration,,
import latexstudio.editor.remote.DbxUtil;,declaration,,
public class DbxAutoSync implements Runnable {,declaration,,
private final DropboxRevisionsTopComponent drtc = new TopComponentFactory<DropboxRevisionsTopComponent>(),declaration,,
.getTopComponent(DropboxRevisionsTopComponent.class.getSimpleName());,expression,,
"private static final ApplicationLogger LOGGER = new ApplicationLogger(""Cloud Support"");",declaration,,
private int interval;,declaration,,
public DbxAutoSync() {,declaration,,
this(1);,expression,,
public DbxAutoSync(int val) {,declaration,,
this.interval = val;,expression,,
public void setInterval(int interval) {,declaration,,
this.interval = interval;,expression,,
public int getInterval() {,declaration,,
return interval;,expression,,
public void run() {,declaration,,
while(this.interval > 0 && Cloud.getInstance().getStatus() == Cloud.Status.DBX_CONNECTED) {,control,,
try {,control,,
Thread.sleep(this.interval * 1000 * 60);,expression,,
SwingUtilities.invokeLater(new Runnable(){,expression,,
public void run(){,declaration,,
"new DbxFileActions().saveProgress(DbxUtil.getDbxClient(), drtc, false);",expression,,
} catch (InterruptedException ex) {,control,,
"LOGGER.log(""You change the setting of remote auto sync."");",expression,,
package latexstudio.editor;,declaration,,
import com.dropbox.core.DbxException;,declaration,,
import com.dropbox.core.v2.DbxClientV2;,declaration,,
import java.awt.Color;,declaration,,
import java.io.BufferedReader;,declaration,,
import java.io.File;,declaration,,
import java.io.IOException;,declaration,,
import java.io.InputStream;,declaration,,
import java.io.InputStreamReader;,declaration,,
import java.net.URL;,declaration,,
import java.util.ArrayList;,declaration,,
import java.util.Arrays;,declaration,,
if (file != null && file.isFile()) {,control,,
import java.util.List;,declaration,,
import javax.swing.JOptionPane;,declaration,,
import javax.swing.text.BadLocationException;,declaration,,
import javax.swing.text.DefaultHighlighter;,declaration,,
import javax.swing.text.Highlighter;,declaration,,
import latexstudio.editor.files.FileService;,declaration,,
import latexstudio.editor.remote.Cloud;,declaration,,
if (dialogType == FileChooserService.DialogType.SAVE || dialogType == FileChooserService.DialogType.SAVEAS) {,control,,
import latexstudio.editor.remote.DbxUtil;,declaration,,
import latexstudio.editor.settings.ApplicationSettings;,declaration,,
import latexstudio.editor.settings.SettingListener;,declaration,,
if (file != null) {,control,,
import latexstudio.editor.util.ApplicationUtils;,declaration,,
import org.apache.commons.io.IOUtils;,declaration,,
import org.fife.ui.autocomplete.AutoCompletion;,declaration,,
import org.fife.ui.autocomplete.BasicCompletion;,declaration,,
break;,control,,
import org.fife.ui.autocomplete.CompletionProvider;,declaration,,
import org.fife.ui.autocomplete.DefaultCompletionProvider;,declaration,,
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;,declaration,,
import org.languagetool.JLanguageTool;,declaration,,
import org.languagetool.language.AmericanEnglish;,declaration,,
if (client == null) {,control,,
import org.languagetool.rules.Rule;,declaration,,
import org.languagetool.rules.spelling.SpellingCheckRule;,declaration,,
import org.netbeans.api.settings.ConvertAsProperties;,declaration,,
try (FileInputStream inputStream = new FileInputStream(file)) {,control,,
import org.openide.awt.ActionID;,declaration,,
if (dbxState != null) {,control,,
import org.openide.awt.ActionReference;,declaration,,
try {,control,,
import org.openide.util.Exceptions;,declaration,,
import org.openide.util.NbBundle.Messages;,declaration,,
import org.openide.windows.TopComponent;,declaration,,
"dtd = ""-//latexstudio.editor//Editor//EN"",",expression,,
autostore = false,expression,,
"preferredID = ""EditorTopComponent"",",expression,,
if(isDialogMsg) {,control,,
persistenceType = TopComponent.PERSISTENCE_ALWAYS,expression,,
"displayName = ""#CTL_EditorAction"",",expression,,
"preferredID = ""EditorTopComponent""",expression,,
"""CTL_EditorAction=Editor"",",expression,,
"""CTL_EditorTopComponent=Editor Window"",",expression,,
} else {,control,,
"""HINT_EditorTopComponent=This is a Editor window""",expression,,
public final class EditorTopComponent extends TopComponent {,declaration,,
private final EditorState editorState = new EditorState();,declaration,,
private AutoCompletion autoCompletion = null;,declaration,,
} catch (DbxException ex) {,control,,
"private static final ApplicationLogger LOGGER = new ApplicationLogger(""Cloud Support"");",declaration,,
private JLanguageTool langTool = null;,declaration,,
} catch (IOException ex) {,control,,
private Highlighter.HighlightPainter painter = null;,declaration,,
private boolean spellCheckStatusChange = true;,declaration,,
} finally {,control,,
private Thread autoCheckThread = null;,declaration,,
public EditorTopComponent() {,declaration,,
initComponents();,expression,,
} else {,control,,
setName(Bundle.CTL_EditorTopComponent());,expression,,
if(isDialogMsg) {,control,,
"setDisplayName(""welcome.tex"");",expression,,
setToolTipText(Bundle.HINT_EditorTopComponent());,expression,,
"putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);",expression,,
} else {,control,,
"putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);",expression,,
displayCloudStatus();,expression,,
} catch (IOException ex) {,control,,
setupSpellCheckTool();,expression,,
public void setAutocompleteEnabled(boolean value) {,declaration,,
if (autoCompletion != null) {,control,,
autoCompletion.setAutoActivationEnabled(value);,expression,,
if (!dbxEntries.isEmpty()) {,control,,
public void setAutocompleteDelay(int value) {,declaration,,
if (autoCompletion != null) {,control,,
autoCompletion.setAutoActivationDelay(value);,expression,,
if (jTable1.getColumnModel().getColumnCount() > 0) {,control,,
public void setLinewrapEnabled(boolean value) {,declaration,,
if (option == JOptionPane.OK_OPTION && !list.isSelectionEmpty()) {,control,,
if (rSyntaxTextArea != null) {,control,,
rSyntaxTextArea.setLineWrap(value);,expression,,
private void initComponents() {,declaration,,
rSyntaxTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();,expression,,
rTextScrollPane1 = new org.fife.ui.rtextarea.RTextScrollPane(rSyntaxTextArea);,expression,,
rSyntaxTextArea.setColumns(20);,expression,,
rSyntaxTextArea.setRows(5);,expression,,
"rSyntaxTextArea.setSyntaxEditingStyle(org.openide.util.NbBundle.getMessage(EditorTopComponent.class, ""EditorTopComponent.rSyntaxTextArea.syntaxEditingStyle"")); // NOI18N",expression,,
rSyntaxTextArea.addKeyListener(new java.awt.event.KeyAdapter() {,expression,,
public void keyReleased(java.awt.event.KeyEvent evt) {,declaration,,
rSyntaxTextAreaKeyReleased(evt);,expression,,
public void keyTyped(java.awt.event.KeyEvent evt) {,declaration,,
rSyntaxTextAreaKeyTyped(evt);,expression,,
rTextScrollPane1.setFoldIndicatorEnabled(true);,expression,,
} else{,control,,
rTextScrollPane1.setLineNumbersEnabled(true);,expression,,
for (int i = 0; i < dlm.size(); i++) {,control,,
javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);,declaration,,
if (revisionNumber.equals(dlm.get(i).getRevision())) {,control,,
this.setLayout(layout);,expression,,
layout.setHorizontalGroup(,expression,,
if (client == null) {,control,,
break;,control,,
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),expression,,
.addGroup(layout.createSequentialGroup(),expression,,
try {,control,,
if (entry != null) {,control,,
.addContainerGap(),expression,,
".addComponent(rTextScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)",expression,,
while (true) {,control,,
try {,control,,
.addContainerGap()),expression,,
for (Metadata metadata : result.getEntries()) {,control,,
layout.setVerticalGroup(,expression,,
if (metadata instanceof FileMetadata) {,control,,
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),expression,,
.addGroup(layout.createSequentialGroup(),expression,,
if (name.endsWith(TEX_EXTENSION)) {,control,,
.addContainerGap(),expression,,
} catch (DbxException e) {,control,,
".addComponent(rTextScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)",expression,,
if (!result.getHasMore()) {,control,,
.addContainerGap()),expression,,
break;,control,,
} catch (IOException e) {,control,,
private void rSyntaxTextAreaKeyReleased(java.awt.event.KeyEvent evt) {,declaration,,
editorState.setDirty(true);,expression,,
} catch (DbxException ex) {,control,,
} finally {,control,,
editorState.setModified(true);,expression,,
private void rSyntaxTextAreaKeyTyped(java.awt.event.KeyEvent evt) {,declaration,,
if (editorState.getCurrentFile() == null || evt.isControlDown()) {,control,,
} finally {,control,,
return;,expression,,
setDisplayName(editorState.getCurrentFile().getName() + '*');,expression,,
private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea rSyntaxTextArea;,declaration,,
try {,control,,
private org.fife.ui.rtextarea.RTextScrollPane rTextScrollPane1;,declaration,,
public void componentOpened() {,declaration,,
} catch (IOException e) {,control,,
ApplicationUtils.deleteTempFiles();,expression,,
CompletionProvider provider = createCompletionProvider();,declaration,,
autoCompletion = new AutoCompletion(provider);,expression,,
autoCompletion.install(rSyntaxTextArea);,expression,,
if (evt.getClickCount() == 2) {,control,,
ApplicationSettings.INSTANCE.registerSettingListeners(this);,expression,,
String initFileDir = (String) ApplicationSettings.Setting.USER_LASTFILE.getValue();,declaration,,
if (doc.getLength() > 4){,control,,
File initFile = new File(initFileDir);,declaration,,
if (initFile.exists() && initFile.isFile()) {,control,,
String content = FileService.readFromFile(initFileDir);,declaration,,
try {,control,,
if (revisionNumber != null) {,control,,
setEditorContent(content);,expression,,
if (doc.getLength() > 4) {,control,,
setCurrentFile(initFile);,expression,,
} else {,control,,
} catch (BadLocationException ex) {,control,,
InputStream is = null;,declaration,,
try {,control,,
}else{,control,,
"is = getClass().getResource(""/openlatexstudio/welcome.tex"").openStream();",expression,,
String welcomeMessage = IOUtils.toString(is);,declaration,,
setEditorContent(welcomeMessage);,expression,,
} catch (IOException ex) {,control,,
Exceptions.printStackTrace(ex);,expression,,
} finally {,control,,
IOUtils.closeQuietly(is);,expression,,
public void componentClosed() {,declaration,,
if (path != null) {,control,,
public String getEditorContent() {,declaration,,
try {,control,,
return rSyntaxTextArea.getText();,expression,,
public void setEditorContent(String text) {,declaration,,
if (directory != null) {,control,,
} catch (DbxException ex) {,control,,
rSyntaxTextArea.setText(text);,expression,,
editorState.setDirty(true);,expression,,
public Thread getAutoCheckThread() {,declaration,,
while (!pdfLatexExe.exists() && reply == JOptionPane.NO_OPTION) {,control,,
return autoCheckThread;,expression,,
public void setAutoCheckThread(Thread autoCheckThread) {,declaration,,
this.autoCheckThread = autoCheckThread;,expression,,
public RSyntaxTextArea getrSyntaxTextArea() {,declaration,,
return rSyntaxTextArea;,expression,,
if (reply == JOptionPane.NO_OPTION) {,control,,
public void setrSyntaxTextArea(RSyntaxTextArea rSyntaxTextArea) {,declaration,,
this.rSyntaxTextArea = rSyntaxTextArea;,expression,,
if (directory != null) {,control,,
if (entries != null && entries.size() > 0) {,control,,
public JLanguageTool getLangTool() {,declaration,,
for (FileMetadata metadata : entries) {,control,,
return langTool;,expression,,
} else {,control,,
public void setLangTool(JLanguageTool langTool) {,declaration,,
break;,control,,
this.langTool = langTool;,expression,,
if (directory != null) {,control,,
public Highlighter.HighlightPainter getPainter() {,declaration,,
return painter;,expression,,
public void setPainter(Highlighter.HighlightPainter painter) {,declaration,,
if(!autoCompleteCheckBox.equals(evt.getSource())) {,control,,
this.painter = painter;,expression,,
public boolean isSpellCheckStatusChange() {,declaration,,
return spellCheckStatusChange;,expression,,
public void setSpellCheckStatusChange(boolean spellCheckStatusChange) {,declaration,,
this.spellCheckStatusChange = spellCheckStatusChange;,expression,,
public void undoAction() {,declaration,,
rSyntaxTextArea.undoLastAction();,expression,,
public void redoAction() {,declaration,,
rSyntaxTextArea.redoLastAction();,expression,,
public void setCurrentFile(File currentFile) {,declaration,,
editorState.setCurrentFile(currentFile);,expression,,
if (currentFile != null) {,control,,
setDisplayName(currentFile.getName());,expression,,
ApplicationSettings.Setting.USER_LASTFILE.setValue(currentFile.getAbsolutePath());,expression,,
ApplicationSettings.INSTANCE.save();,expression,,
private String findStartSymbol() {,declaration,,
int carretCoordinates;,declaration,,
while (true) {,control,,
if(autoCompleteStatus){,control,,
carretCoordinates = rSyntaxTextArea.getSelectionStart();,expression,,
try{,control,,
"if (rSyntaxTextArea.getSelectedText().startsWith(""\n"") || rSyntaxTextArea.getSelectionStart() == 0) {",control,,
if (rSyntaxTextArea.getSelectionStart() != 0) {,control,,
if (autoCompleteDelay < 0 || autoCompleteDelay > 9999) {,control,,
"rSyntaxTextArea.select(carretCoordinates + 1, rSyntaxTextArea.getSelectionEnd());",expression,,
} else {,control,,
}catch(NumberFormatException ex){,control,,
"rSyntaxTextArea.select(carretCoordinates, rSyntaxTextArea.getSelectionEnd());",expression,,
return rSyntaxTextArea.getSelectedText();,expression,,
} else {,control,,
carretCoordinates--;,expression,,
"rSyntaxTextArea.select(carretCoordinates, rSyntaxTextArea.getSelectionEnd());",expression,,
public void commentOutText() {,declaration,,
String highlightedTextArea = rSyntaxTextArea.getSelectedText();,declaration,,
if (highlightedTextArea != null) { // Some text is highlighted case,control,,
highlightedTextArea = findStartSymbol();,expression,,
"if (highlightedTextArea.startsWith(""%"")) {",control,,
"rSyntaxTextArea.replaceSelection(highlightedTextArea.replace(""%"", """"));",expression,,
} else {,control,,
"String[] array = highlightedTextArea.split(""\n"");",declaration,,
StringBuilder commentedCodeBuilder = new StringBuilder();,declaration,,
for (int i = 0; i < array.length; i++) {,control,,
"array[i] = (array[i].charAt(0) == '%') ? array[i] : ""%"" + array[i];",expression,,
if (i != array.length - 1) {,control,,
"array[i] = array[i] + ""\n"";",expression,,
commentedCodeBuilder.append(array[i]);,expression,,
rSyntaxTextArea.replaceSelection(commentedCodeBuilder.toString());,expression,,
} else { // Nothing is highlighted case,control,,
try {,control,,
int currentOffsetFromLineStart = rSyntaxTextArea.getCaretOffsetFromLineStart();,declaration,,
int currentCaretPosition = rSyntaxTextArea.getCaretPosition();,declaration,,
int lineStartPosition = currentCaretPosition - currentOffsetFromLineStart;,declaration,,
int lineLength = rSyntaxTextArea.getLineEndOffsetOfCurrentLine();,declaration,,
"String firstChar = rSyntaxTextArea.getText(lineStartPosition, lineLength - lineStartPosition);",declaration,,
"if (firstChar.startsWith(""%"")) {",control,,
"rSyntaxTextArea.replaceRange("""", lineStartPosition, lineStartPosition + 1);",expression,,
} else {,control,,
"rSyntaxTextArea.replaceRange(""%"", lineStartPosition, lineStartPosition);",expression,,
} catch (BadLocationException ex) {,control,,
Exceptions.printStackTrace(ex);,expression,,
void writeProperties(java.util.Properties p) {,declaration,,
"p.setProperty(""version"", ""1.0"");",expression,,
void readProperties(java.util.Properties p) {,declaration,,
"String version = p.getProperty(""version"");",declaration,,
private CompletionProvider createCompletionProvider() {,declaration,,
DefaultCompletionProvider provider = new DefaultCompletionProvider();,declaration,,
"provider.setAutoActivationRules(true, """");",declaration,,
URL[] urls = new URL[3];,declaration,,
"urls[0] = getClass().getResource(""/openlatexstudio/tex.cwl"");",expression,,
"urls[1] = getClass().getResource(""/openlatexstudio/latex-document.cwl"");",expression,,
"urls[2] = getClass().getResource(""/openlatexstudio/latex-mathsymbols.cwl"");",expression,,
for (URL url : urls) {,control,,
InputStream is = null;,declaration,,
try {,control,,
is = url.openStream();,expression,,
BufferedReader br = new BufferedReader(new InputStreamReader(is));,declaration,,
String line;,declaration,,
while ((line = br.readLine()) != null) {,control,,
"if (!line.startsWith(""#"")) {",control,,
"provider.addCompletion(new BasicCompletion(provider, line.substring(1)));",declaration,,
} catch (IOException ex) {,control,,
Exceptions.printStackTrace(ex);,expression,,
} finally {,control,,
IOUtils.closeQuietly(is);,expression,,
return provider;,expression,,
private void displayCloudStatus() {,declaration,,
"String message = ""Working locally."";",declaration,,
String displayName;,declaration,,
DbxClientV2 client = DbxUtil.getDbxClient();,declaration,,
if (client != null) {,control,,
try {,control,,
displayName = client.users().getCurrentAccount().getName().getDisplayName();,expression,,
"message = ""Connected to Dropbox account as "" + displayName + ""."";",expression,,
"Cloud.getInstance().setStatus(Cloud.Status.DBX_CONNECTED, "" ("" + displayName + "")"");",expression,,
} catch (DbxException ex) {,control,,
Cloud.getInstance().setStatus(Cloud.Status.DISCONNECTED);,expression,,
LOGGER.log(message);,expression,,
private void setupSpellCheckTool() {,declaration,,
painter = new DefaultHighlighter.DefaultHighlightPainter(Color.PINK); //Default color is: PINK,expression,,
langTool = new JLanguageTool(new AmericanEnglish()); //Default Language is: American English,expression,,
for (Rule rule : langTool.getAllActiveRules()) {,control,,
if (rule instanceof SpellingCheckRule) {,control,,
((SpellingCheckRule)rule).acceptPhrases(getLatexTerms()); //Accept LaText Terms from tex.cwl,expression,,
"((SpellingCheckRule)rule).acceptPhrases(Arrays.asList(""documentclass"", ""maketitle"", ""tex"", ""TEX"", ""Tex"")); //Accept some TEX terms not contained in tex.cwl",expression,,
private List<String> getLatexTerms() {,declaration,,
List latexTerms = new ArrayList<>();,declaration,,
InputStream is = null;,declaration,,
URL latexTermsResource;,declaration,,
try {,control,,
"latexTermsResource = getClass().getResource(""/openlatexstudio/tex.cwl"");",expression,,
is = latexTermsResource.openStream();,expression,,
BufferedReader br = new BufferedReader(new InputStreamReader(is));,declaration,,
String line;,declaration,,
while ((line = br.readLine()) != null) {,control,,
"if (!line.startsWith(""#"")) {",control,,
"latexTerms.add(line.substring(1)); //LanguageTool cannot recognize string starts with ""\""",expression,,
} catch (IOException ex) {,control,,
Exceptions.printStackTrace(ex);,expression,,
} finally {,control,,
IOUtils.closeQuietly(is);,expression,,
return latexTerms;,expression,,
public UnsavedWorkState canOpen() {,declaration,,
if (editorState.isModified() && !editorState.isPreviewDisplayed()) {,control,,
"int userChoice = JOptionPane.showConfirmDialog(this, ""This document has been modified. Do you want to save it first?"", ""Save document"", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);",declaration,,
if (userChoice == JOptionPane.YES_OPTION) {,control,,
return UnsavedWorkState.SAVE_AND_OPEN;,expression,,
} else if (userChoice == JOptionPane.NO_OPTION) {,control,,
return UnsavedWorkState.OPEN;,expression,,
} else {,control,,
return UnsavedWorkState.CANCEL;,expression,,
} else {,control,,
return UnsavedWorkState.OPEN;,expression,,
public EditorState getEditorState() {,declaration,,
return editorState;,expression,,
package latexstudio.editor;,declaration,,
import java.awt.Color;,declaration,,
import java.awt.Point;,declaration,,
import javax.swing.JPanel;,declaration,,
import javax.swing.JViewport;,declaration,,
import latexstudio.editor.pdf.PDFDisplay;,declaration,,
import latexstudio.editor.runtime.PeriodicTasksService;,declaration,,
import latexstudio.editor.pdf.PDFService;,declaration,,
import org.netbeans.api.settings.ConvertAsProperties;,declaration,,
import org.openide.awt.ActionID;,declaration,,
import org.openide.awt.ActionReference;,declaration,,
import org.openide.util.NbBundle.Messages;,declaration,,
import org.openide.windows.TopComponent;,declaration,,
"dtd = ""-//latexstudio.editor//PDFViewer//EN"",",expression,,
autostore = false,expression,,
"preferredID = ""PDFViewerTopComponent"",",expression,,
persistenceType = TopComponent.PERSISTENCE_ALWAYS,expression,,
"displayName = ""#CTL_PDFViewerAction"",",expression,,
"preferredID = ""PDFViewerTopComponent""",expression,,
"""CTL_PDFViewerAction=PDF Preview"",",expression,,
"""CTL_PDFViewerTopComponent=PDF Preview"",",expression,,
"""HINT_PDFViewerTopComponent=This is a window that displays the preview""",expression,,
public final class PDFViewerTopComponent extends TopComponent {,declaration,,
private static final int DEFAULT_ZOOM = 100;,declaration,,
private static final int MIN_ZOOM = 20;,declaration,,
private static final int MAX_ZOOM = 300;,declaration,,
private static final int SPINNER_ZOOM_SIZE = 10;,declaration,,
private final EditorTopComponent etc = new TopComponentFactory<EditorTopComponent>(),declaration,,
.getTopComponent(EditorTopComponent.class.getSimpleName());,expression,,
public PDFViewerTopComponent() {,declaration,,
initComponents();,expression,,
setName(Bundle.CTL_PDFViewerTopComponent());,expression,,
setToolTipText(Bundle.HINT_PDFViewerTopComponent());,expression,,
pdfDisplay = new PDFDisplay();,expression,,
private void initComponents() {,declaration,,
jScrollPane1 = new javax.swing.JScrollPane();,expression,,
jTextField1 = new javax.swing.JTextField();,expression,,
jLabel2 = new javax.swing.JLabel();,expression,,
jButton1 = new javax.swing.JButton();,expression,,
jButton2 = new javax.swing.JButton();,expression,,
jSpinnerZoom = new javax.swing.JSpinner();,expression,,
jLabel1 = new javax.swing.JLabel();,expression,,
jScrollPane1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {,expression,,
public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {,declaration,,
jScrollPane1MouseWheelMoved(evt);,expression,,
"jTextField1.setText(org.openide.util.NbBundle.getMessage(PDFViewerTopComponent.class, ""PDFViewerTopComponent.jTextField1.text"")); // NOI18N",expression,,
jTextField1.addActionListener(new java.awt.event.ActionListener() {,expression,,
public void actionPerformed(java.awt.event.ActionEvent evt) {,declaration,,
jTextField1ActionPerformed(evt);,expression,,
jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {,expression,,
public void keyReleased(java.awt.event.KeyEvent evt) {,declaration,,
jTextField1KeyReleased(evt);,expression,,
"org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PDFViewerTopComponent.class, ""PDFViewerTopComponent.jLabel2.text"")); // NOI18N",expression,,
"org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PDFViewerTopComponent.class, ""PDFViewerTopComponent.jButton1.text"")); // NOI18N",expression,,
jButton1.addActionListener(new java.awt.event.ActionListener() {,expression,,
public void actionPerformed(java.awt.event.ActionEvent evt) {,declaration,,
jButton1ActionPerformed(evt);,expression,,
"org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(PDFViewerTopComponent.class, ""PDFViewerTopComponent.jButton2.text"")); // NOI18N",expression,,
jButton2.addActionListener(new java.awt.event.ActionListener() {,expression,,
public void actionPerformed(java.awt.event.ActionEvent evt) {,declaration,,
jButton2ActionPerformed(evt);,expression,,
"jSpinnerZoom.setModel(new javax.swing.SpinnerNumberModel(DEFAULT_ZOOM, MIN_ZOOM, MAX_ZOOM, SPINNER_ZOOM_SIZE));",expression,,
"jSpinnerZoom.setName(""jSpinnerZoom""); // NOI18N",expression,,
jSpinnerZoom.addMouseWheelListener(new java.awt.event.MouseWheelListener() {,expression,,
public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {,declaration,,
jSpinnerZoomMouseWheelMoved(evt);,expression,,
jSpinnerZoom.addChangeListener(new javax.swing.event.ChangeListener() {,expression,,
public void stateChanged(javax.swing.event.ChangeEvent evt) {,declaration,,
jSpinnerZoomStateChanged(evt);,expression,,
"org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PDFViewerTopComponent.class, ""PDFViewerTopComponent.jLabelZoom.text"")); // NOI18N",expression,,
if (client == null) {,control,,
"jLabel1.setName(""jLabelZoom""); // NOI18N",expression,,
javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);,expression,,
if (displayedRevision != null) {,control,,
this.setLayout(layout);,expression,,
try {,control,,
layout.setHorizontalGroup(,expression,,
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),expression,,
.addGroup(layout.createSequentialGroup(),expression,,
.addContainerGap(),expression,,
.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),expression,,
} catch (DbxException e) {,control,,
.addComponent(jScrollPane1),expression,,
.addGroup(layout.createSequentialGroup(),expression,,
} catch (IOException e) {,control,,
".addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)",expression,,
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),expression,,
".addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)",expression,,
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),expression,,
.addComponent(jLabel2),expression,,
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),expression,,
".addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)",expression,,
".addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)",expression,,
.addComponent(jLabel1),expression,,
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),expression,,
".addComponent(jSpinnerZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))",expression,,
.addContainerGap()),expression,,
layout.setVerticalGroup(,expression,,
layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),expression,,
".addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()",expression,,
.addContainerGap(),expression,,
".addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)",expression,,
".addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)",expression,,
.addComponent(jSpinnerZoom),expression,,
.addComponent(jLabel1)),expression,,
".addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)",expression,,
.addComponent(jButton1),expression,,
".addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)",expression,,
.addComponent(jLabel2),expression,,
".addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))",expression,,
.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),expression,,
".addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)",expression,,
.addContainerGap()),expression,,
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed,declaration,,
boolean pageModified = pdfDisplay.nextPage();,declaration,,
if (pageModified) {,control,,
refreshDisplayPane();,expression,,
private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed,declaration,,
boolean pageModified = pdfDisplay.previousPage();,declaration,,
if (pageModified) {,control,,
refreshDisplayPane();,expression,,
private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased,declaration,,
try {,control,,
int selectedPage = Integer.parseInt(jTextField1.getText());,declaration,,
jTextField1.setBackground(Color.WHITE);,expression,,
pdfDisplay.setPage(selectedPage);,expression,,
jTextField1.setText(Integer.toString(pdfDisplay.getSelectedPage()));,expression,,
refreshDisplayPane();,expression,,
} catch (NumberFormatException e) {,control,,
jTextField1.setBackground(Color.PINK);,expression,,
private void externalZoomBy(int zoomDelta) {,declaration,,
int zoom = (Integer)jSpinnerZoom.getValue();,declaration,,
zoom += zoomDelta;,expression,,
if (zoom < MIN_ZOOM ) {,control,,
zoom = MIN_ZOOM;,expression,,
if (zoom > MAX_ZOOM) {,control,,
zoom = MAX_ZOOM;,expression,,
jSpinnerZoom.setValue (zoom); // triggers jSpinnerZoomStateChanged,expression,,
private void jSpinnerZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerZoomStateChanged,declaration,,
try {,control,,
int zoom = (Integer)jSpinnerZoom.getValue();,declaration,,
jSpinnerZoom.setBackground(Color.WHITE);,expression,,
pdfDisplay.setZoom(zoom);,expression,,
refreshDisplayPane();,expression,,
} catch (ClassCastException e) {,control,,
jSpinnerZoom.setBackground(Color.PINK);,expression,,
private void jSpinnerZoomMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jSpinnerZoomMouseWheelMoved,declaration,,
try {,control,,
int r = evt.getWheelRotation();,declaration,,
r = r * SPINNER_ZOOM_SIZE * -1;,expression,,
externalZoomBy(r);,expression,,
} catch (ClassCastException e) {,control,,
jSpinnerZoom.setBackground(Color.PINK);,expression,,
private void jScrollPane1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane1MouseWheelMoved,declaration,,
if (evt.isControlDown()) {,control,,
try {,control,,
int r = evt.getWheelRotation();,declaration,,
r = r * SPINNER_ZOOM_SIZE * -1;,expression,,
externalZoomBy(r);,expression,,
} catch (ClassCastException e) {,control,,
jSpinnerZoom.setBackground(Color.PINK);,expression,,
private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed,declaration,,
private javax.swing.JButton jButton1;,declaration,,
private javax.swing.JButton jButton2;,declaration,,
private javax.swing.JLabel jLabel1;,declaration,,
private javax.swing.JLabel jLabel2;,declaration,,
private javax.swing.JScrollPane jScrollPane1;,declaration,,
private javax.swing.JSpinner jSpinnerZoom;,declaration,,
private javax.swing.JTextField jTextField1;,declaration,,
private PDFDisplay pdfDisplay;,declaration,,
public void componentOpened() {,declaration,,
"Thread refresher = new Thread(new PeriodicTasksService(jScrollPane1, jLabel2, etc, pdfDisplay));",expression,,
refresher.start();,expression,,
public void componentClosed() {,declaration,,
PDFService.closeDocument();,expression,,
private void refreshDisplayPane() {,declaration,,
JPanel pdfImagePanel = pdfDisplay.drawPreviewOnJPanel();,declaration,,
if (pdfImagePanel != null) {,control,,
JViewport vp = jScrollPane1.getViewport();,declaration,,
Point p = vp.getViewPosition();,declaration,,
vp.setView(pdfImagePanel);,expression,,
vp.setViewPosition(p);,expression,,
jTextField1.setText(String.valueOf(pdfDisplay.getSelectedPage()));,expression,,
"jLabel2.setText(""of "" + pdfDisplay.getTotalPages());",expression,,
void writeProperties(java.util.Properties p) {,declaration,,
"p.setProperty(""version"", ""1.0"");",expression,,
void readProperties(java.util.Properties p) {,declaration,,
"String version = p.getProperty(""version"");",declaration,,
